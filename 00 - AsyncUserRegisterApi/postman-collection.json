{
  "info": {
    "name": "Async User Register API",
    "description": "Postman collection for testing the Async User Register API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [    {
      "key": "base_url",
      "value": "https://your-api-id.execute-api.us-east-1.amazonaws.com/dev/api/v1",
      "type": "string"
    },
    {
      "key": "user_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "board_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Register User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 202\", function () {",
              "    pm.response.to.have.status(202);",
              "});",
              "",
              "pm.test(\"Response has success field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"{{user_email}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/register",
          "host": ["{{base_url}}"],
          "path": ["register"]
        }
      }
    },
    {
      "name": "2. Get User by Email",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has user data\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.userId).to.exist;",
              "    pm.expect(jsonData.data.email).to.eql(pm.collectionVariables.get('user_email'));",
              "    ",
              "    // Save user ID for later requests",
              "    pm.collectionVariables.set('user_id', jsonData.data.userId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/user/{{user_email}}",
          "host": ["{{base_url}}"],
          "path": ["user", "{{user_email}}"]
        }
      }
    },
    {
      "name": "3. List Boards (Empty)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has boards array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.boards).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/boards",
          "host": ["{{base_url}}"],
          "path": ["boards"]
        }
      }
    },
    {
      "name": "4. Create Board",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 202\", function () {",
              "    pm.response.to.have.status(202);",
              "});",
              "",
              "pm.test(\"Response has success field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"General Discussion\",\n    \"description\": \"A board for general discussions\",\n    \"createdBy\": \"{{user_id}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/boards",
          "host": ["{{base_url}}"],
          "path": ["boards"]
        }
      }
    },
    {
      "name": "5. List Boards (After Creation)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has boards with created board\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.boards).to.be.an('array');",
              "    pm.expect(jsonData.data.boards.length).to.be.above(0);",
              "    ",
              "    // Save board ID for later requests",
              "    if (jsonData.data.boards.length > 0) {",
              "        pm.collectionVariables.set('board_id', jsonData.data.boards[0].boardId);",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/boards",
          "host": ["{{base_url}}"],
          "path": ["boards"]
        }
      }
    },
    {
      "name": "6. Post Message to Board",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 202\", function () {",
              "    pm.response.to.have.status(202);",
              "});",
              "",
              "pm.test(\"Response has success field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"Hello, this is my first message!\",\n    \"userId\": \"{{user_id}}\",\n    \"userName\": \"Test User\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/boards/{{board_id}}/messages",
          "host": ["{{base_url}}"],
          "path": ["boards", "{{board_id}}", "messages"]
        }
      }
    },
    {
      "name": "7. Get Messages from Board",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has messages array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.data.messages).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/boards/{{board_id}}/messages",
          "host": ["{{base_url}}"],
          "path": ["boards", "{{board_id}}", "messages"]
        }
      }
    },
    {
      "name": "Error: Invalid Email Registration",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.false;",
              "    pm.expect(jsonData.error).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Invalid User\",\n    \"email\": \"invalid-email\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/register",
          "host": ["{{base_url}}"],
          "path": ["register"]
        }
      }
    },
    {
      "name": "Error: Non-existent User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.false;",
              "    pm.expect(jsonData.error).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/user/nonexistent@example.com",
          "host": ["{{base_url}}"],
          "path": ["user", "nonexistent@example.com"]
        }
      }
    }
  ]
}
